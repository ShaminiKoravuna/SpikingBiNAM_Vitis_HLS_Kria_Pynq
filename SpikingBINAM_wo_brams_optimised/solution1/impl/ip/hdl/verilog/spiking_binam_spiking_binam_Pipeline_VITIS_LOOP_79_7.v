// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module spiking_binam_spiking_binam_Pipeline_VITIS_LOOP_79_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_spikes_TREADY,
        ref_timer_V_7_address0,
        ref_timer_V_7_ce0,
        ref_timer_V_7_we0,
        ref_timer_V_7_d0,
        ref_timer_V_6_address0,
        ref_timer_V_6_ce0,
        ref_timer_V_6_we0,
        ref_timer_V_6_d0,
        ref_timer_V_5_address0,
        ref_timer_V_5_ce0,
        ref_timer_V_5_we0,
        ref_timer_V_5_d0,
        ref_timer_V_4_address0,
        ref_timer_V_4_ce0,
        ref_timer_V_4_we0,
        ref_timer_V_4_d0,
        ref_timer_V_3_address0,
        ref_timer_V_3_ce0,
        ref_timer_V_3_we0,
        ref_timer_V_3_d0,
        ref_timer_V_2_address0,
        ref_timer_V_2_ce0,
        ref_timer_V_2_we0,
        ref_timer_V_2_d0,
        ref_timer_V_1_address0,
        ref_timer_V_1_ce0,
        ref_timer_V_1_we0,
        ref_timer_V_1_d0,
        ref_timer_V_address0,
        ref_timer_V_ce0,
        ref_timer_V_we0,
        ref_timer_V_d0,
        v_V_7_address0,
        v_V_7_ce0,
        v_V_7_we0,
        v_V_7_d0,
        v_V_7_address1,
        v_V_7_ce1,
        v_V_7_q1,
        v_V_6_address0,
        v_V_6_ce0,
        v_V_6_we0,
        v_V_6_d0,
        v_V_6_address1,
        v_V_6_ce1,
        v_V_6_q1,
        v_V_5_address0,
        v_V_5_ce0,
        v_V_5_we0,
        v_V_5_d0,
        v_V_5_address1,
        v_V_5_ce1,
        v_V_5_q1,
        v_V_4_address0,
        v_V_4_ce0,
        v_V_4_we0,
        v_V_4_d0,
        v_V_4_address1,
        v_V_4_ce1,
        v_V_4_q1,
        v_V_3_address0,
        v_V_3_ce0,
        v_V_3_we0,
        v_V_3_d0,
        v_V_3_address1,
        v_V_3_ce1,
        v_V_3_q1,
        v_V_2_address0,
        v_V_2_ce0,
        v_V_2_we0,
        v_V_2_d0,
        v_V_2_address1,
        v_V_2_ce1,
        v_V_2_q1,
        v_V_1_address0,
        v_V_1_ce0,
        v_V_1_we0,
        v_V_1_d0,
        v_V_1_address1,
        v_V_1_ce1,
        v_V_1_q1,
        v_V_address0,
        v_V_ce0,
        v_V_we0,
        v_V_d0,
        v_V_address1,
        v_V_ce1,
        v_V_q1,
        threshW,
        bin_start_V,
        out_spikes_TDATA,
        out_spikes_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   out_spikes_TREADY;
output  [4:0] ref_timer_V_7_address0;
output   ref_timer_V_7_ce0;
output   ref_timer_V_7_we0;
output  [2:0] ref_timer_V_7_d0;
output  [4:0] ref_timer_V_6_address0;
output   ref_timer_V_6_ce0;
output   ref_timer_V_6_we0;
output  [2:0] ref_timer_V_6_d0;
output  [4:0] ref_timer_V_5_address0;
output   ref_timer_V_5_ce0;
output   ref_timer_V_5_we0;
output  [2:0] ref_timer_V_5_d0;
output  [4:0] ref_timer_V_4_address0;
output   ref_timer_V_4_ce0;
output   ref_timer_V_4_we0;
output  [2:0] ref_timer_V_4_d0;
output  [4:0] ref_timer_V_3_address0;
output   ref_timer_V_3_ce0;
output   ref_timer_V_3_we0;
output  [2:0] ref_timer_V_3_d0;
output  [4:0] ref_timer_V_2_address0;
output   ref_timer_V_2_ce0;
output   ref_timer_V_2_we0;
output  [2:0] ref_timer_V_2_d0;
output  [4:0] ref_timer_V_1_address0;
output   ref_timer_V_1_ce0;
output   ref_timer_V_1_we0;
output  [2:0] ref_timer_V_1_d0;
output  [4:0] ref_timer_V_address0;
output   ref_timer_V_ce0;
output   ref_timer_V_we0;
output  [2:0] ref_timer_V_d0;
output  [4:0] v_V_7_address0;
output   v_V_7_ce0;
output   v_V_7_we0;
output  [6:0] v_V_7_d0;
output  [4:0] v_V_7_address1;
output   v_V_7_ce1;
input  [6:0] v_V_7_q1;
output  [4:0] v_V_6_address0;
output   v_V_6_ce0;
output   v_V_6_we0;
output  [6:0] v_V_6_d0;
output  [4:0] v_V_6_address1;
output   v_V_6_ce1;
input  [6:0] v_V_6_q1;
output  [4:0] v_V_5_address0;
output   v_V_5_ce0;
output   v_V_5_we0;
output  [6:0] v_V_5_d0;
output  [4:0] v_V_5_address1;
output   v_V_5_ce1;
input  [6:0] v_V_5_q1;
output  [4:0] v_V_4_address0;
output   v_V_4_ce0;
output   v_V_4_we0;
output  [6:0] v_V_4_d0;
output  [4:0] v_V_4_address1;
output   v_V_4_ce1;
input  [6:0] v_V_4_q1;
output  [4:0] v_V_3_address0;
output   v_V_3_ce0;
output   v_V_3_we0;
output  [6:0] v_V_3_d0;
output  [4:0] v_V_3_address1;
output   v_V_3_ce1;
input  [6:0] v_V_3_q1;
output  [4:0] v_V_2_address0;
output   v_V_2_ce0;
output   v_V_2_we0;
output  [6:0] v_V_2_d0;
output  [4:0] v_V_2_address1;
output   v_V_2_ce1;
input  [6:0] v_V_2_q1;
output  [4:0] v_V_1_address0;
output   v_V_1_ce0;
output   v_V_1_we0;
output  [6:0] v_V_1_d0;
output  [4:0] v_V_1_address1;
output   v_V_1_ce1;
input  [6:0] v_V_1_q1;
output  [4:0] v_V_address0;
output   v_V_ce0;
output   v_V_we0;
output  [6:0] v_V_d0;
output  [4:0] v_V_address1;
output   v_V_ce1;
input  [6:0] v_V_q1;
input  [6:0] threshW;
input  [11:0] bin_start_V;
output  [31:0] out_spikes_TDATA;
output   out_spikes_TVALID;

reg ap_idle;
reg ref_timer_V_7_ce0;
reg ref_timer_V_7_we0;
reg ref_timer_V_6_ce0;
reg ref_timer_V_6_we0;
reg ref_timer_V_5_ce0;
reg ref_timer_V_5_we0;
reg ref_timer_V_4_ce0;
reg ref_timer_V_4_we0;
reg ref_timer_V_3_ce0;
reg ref_timer_V_3_we0;
reg ref_timer_V_2_ce0;
reg ref_timer_V_2_we0;
reg ref_timer_V_1_ce0;
reg ref_timer_V_1_we0;
reg ref_timer_V_ce0;
reg ref_timer_V_we0;
reg v_V_7_ce0;
reg v_V_7_we0;
reg v_V_7_ce1;
reg v_V_6_ce0;
reg v_V_6_we0;
reg v_V_6_ce1;
reg v_V_5_ce0;
reg v_V_5_we0;
reg v_V_5_ce1;
reg v_V_4_ce0;
reg v_V_4_we0;
reg v_V_4_ce1;
reg v_V_3_ce0;
reg v_V_3_we0;
reg v_V_3_ce1;
reg v_V_2_ce0;
reg v_V_2_we0;
reg v_V_2_ce1;
reg v_V_1_ce0;
reg v_V_1_we0;
reg v_V_1_ce1;
reg v_V_ce0;
reg v_V_we0;
reg v_V_ce1;
reg out_spikes_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln1031_reg_571;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln79_fu_391_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    out_spikes_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [8:0] i_reg_493;
wire   [63:0] zext_ln1031_fu_413_p1;
reg   [63:0] zext_ln1031_reg_503;
reg   [4:0] v_V_addr_reg_515;
reg   [4:0] v_V_1_addr_reg_521;
reg   [4:0] v_V_2_addr_reg_527;
reg   [4:0] v_V_3_addr_reg_533;
reg   [4:0] v_V_4_addr_reg_539;
reg   [4:0] v_V_5_addr_reg_545;
reg   [4:0] v_V_6_addr_reg_551;
reg   [4:0] v_V_7_addr_reg_557;
wire   [7:0] trunc_ln79_fu_430_p1;
reg   [7:0] trunc_ln79_reg_563;
wire   [0:0] icmp_ln1031_fu_458_p2;
wire   [2:0] trunc_ln1031_fu_433_p1;
reg   [8:0] i_2_fu_104;
wire   [8:0] i_1_fu_397_p2;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_i;
reg    ap_block_pp0_stage0_01001;
wire   [4:0] lshr_ln2_fu_403_p4;
wire   [2:0] tmp_6_fu_436_p9;
wire   [6:0] tmp_6_fu_436_p10;
wire   [27:0] or_ln_fu_463_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

spiking_binam_mux_83_7_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 7 ),
    .din3_WIDTH( 7 ),
    .din4_WIDTH( 7 ),
    .din5_WIDTH( 7 ),
    .din6_WIDTH( 7 ),
    .din7_WIDTH( 7 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 7 ))
mux_83_7_1_1_U308(
    .din0(v_V_q1),
    .din1(v_V_1_q1),
    .din2(v_V_2_q1),
    .din3(v_V_3_q1),
    .din4(v_V_4_q1),
    .din5(v_V_5_q1),
    .din6(v_V_6_q1),
    .din7(v_V_7_q1),
    .din8(tmp_6_fu_436_p9),
    .dout(tmp_6_fu_436_p10)
);

spiking_binam_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln79_fu_391_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_2_fu_104 <= i_1_fu_397_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_2_fu_104 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        i_reg_493 <= ap_sig_allocacmp_i;
        icmp_ln1031_reg_571 <= icmp_ln1031_fu_458_p2;
        trunc_ln79_reg_563 <= trunc_ln79_fu_430_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_fu_391_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_1_addr_reg_521 <= zext_ln1031_fu_413_p1;
        v_V_2_addr_reg_527 <= zext_ln1031_fu_413_p1;
        v_V_3_addr_reg_533 <= zext_ln1031_fu_413_p1;
        v_V_4_addr_reg_539 <= zext_ln1031_fu_413_p1;
        v_V_5_addr_reg_545 <= zext_ln1031_fu_413_p1;
        v_V_6_addr_reg_551 <= zext_ln1031_fu_413_p1;
        v_V_7_addr_reg_557 <= zext_ln1031_fu_413_p1;
        v_V_addr_reg_515 <= zext_ln1031_fu_413_p1;
        zext_ln1031_reg_503[4 : 0] <= zext_ln1031_fu_413_p1[4 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln79_fu_391_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 9'd0;
    end else begin
        ap_sig_allocacmp_i = i_2_fu_104;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln1031_reg_571 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_spikes_TDATA_blk_n = out_spikes_TREADY;
    end else begin
        out_spikes_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1031_reg_571 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_spikes_TVALID = 1'b1;
    end else begin
        out_spikes_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ref_timer_V_1_ce0 = 1'b1;
    end else begin
        ref_timer_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1031_fu_433_p1 == 3'd1) & (icmp_ln1031_fu_458_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ref_timer_V_1_we0 = 1'b1;
    end else begin
        ref_timer_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ref_timer_V_2_ce0 = 1'b1;
    end else begin
        ref_timer_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1031_fu_433_p1 == 3'd2) & (icmp_ln1031_fu_458_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ref_timer_V_2_we0 = 1'b1;
    end else begin
        ref_timer_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ref_timer_V_3_ce0 = 1'b1;
    end else begin
        ref_timer_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1031_fu_433_p1 == 3'd3) & (icmp_ln1031_fu_458_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ref_timer_V_3_we0 = 1'b1;
    end else begin
        ref_timer_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ref_timer_V_4_ce0 = 1'b1;
    end else begin
        ref_timer_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1031_fu_433_p1 == 3'd4) & (icmp_ln1031_fu_458_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ref_timer_V_4_we0 = 1'b1;
    end else begin
        ref_timer_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ref_timer_V_5_ce0 = 1'b1;
    end else begin
        ref_timer_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1031_fu_433_p1 == 3'd5) & (icmp_ln1031_fu_458_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ref_timer_V_5_we0 = 1'b1;
    end else begin
        ref_timer_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ref_timer_V_6_ce0 = 1'b1;
    end else begin
        ref_timer_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1031_fu_433_p1 == 3'd6) & (icmp_ln1031_fu_458_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ref_timer_V_6_we0 = 1'b1;
    end else begin
        ref_timer_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ref_timer_V_7_ce0 = 1'b1;
    end else begin
        ref_timer_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1031_fu_433_p1 == 3'd7) & (icmp_ln1031_fu_458_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ref_timer_V_7_we0 = 1'b1;
    end else begin
        ref_timer_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ref_timer_V_ce0 = 1'b1;
    end else begin
        ref_timer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1031_fu_433_p1 == 3'd0) & (icmp_ln1031_fu_458_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ref_timer_V_we0 = 1'b1;
    end else begin
        ref_timer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_1_ce0 = 1'b1;
    end else begin
        v_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_1_ce1 = 1'b1;
    end else begin
        v_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1031_fu_433_p1 == 3'd1) & (icmp_ln1031_fu_458_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_1_we0 = 1'b1;
    end else begin
        v_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_2_ce0 = 1'b1;
    end else begin
        v_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_2_ce1 = 1'b1;
    end else begin
        v_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1031_fu_433_p1 == 3'd2) & (icmp_ln1031_fu_458_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_2_we0 = 1'b1;
    end else begin
        v_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_3_ce0 = 1'b1;
    end else begin
        v_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_3_ce1 = 1'b1;
    end else begin
        v_V_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1031_fu_433_p1 == 3'd3) & (icmp_ln1031_fu_458_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_3_we0 = 1'b1;
    end else begin
        v_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_4_ce0 = 1'b1;
    end else begin
        v_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_4_ce1 = 1'b1;
    end else begin
        v_V_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1031_fu_433_p1 == 3'd4) & (icmp_ln1031_fu_458_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_4_we0 = 1'b1;
    end else begin
        v_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_5_ce0 = 1'b1;
    end else begin
        v_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_5_ce1 = 1'b1;
    end else begin
        v_V_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1031_fu_433_p1 == 3'd5) & (icmp_ln1031_fu_458_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_5_we0 = 1'b1;
    end else begin
        v_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_6_ce0 = 1'b1;
    end else begin
        v_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_6_ce1 = 1'b1;
    end else begin
        v_V_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1031_fu_433_p1 == 3'd6) & (icmp_ln1031_fu_458_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_6_we0 = 1'b1;
    end else begin
        v_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_7_ce0 = 1'b1;
    end else begin
        v_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_7_ce1 = 1'b1;
    end else begin
        v_V_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1031_fu_433_p1 == 3'd7) & (icmp_ln1031_fu_458_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_7_we0 = 1'b1;
    end else begin
        v_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_ce0 = 1'b1;
    end else begin
        v_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_ce1 = 1'b1;
    end else begin
        v_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln1031_fu_433_p1 == 3'd0) & (icmp_ln1031_fu_458_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_V_we0 = 1'b1;
    end else begin
        v_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln1031_reg_571 == 1'd0) & (out_spikes_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln1031_reg_571 == 1'd0) & (out_spikes_TREADY == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln1031_reg_571 == 1'd0) & (out_spikes_TREADY == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((icmp_ln1031_reg_571 == 1'd0) & (out_spikes_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln1031_reg_571 == 1'd0) & (out_spikes_TREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_1_fu_397_p2 = (ap_sig_allocacmp_i + 9'd1);

assign icmp_ln1031_fu_458_p2 = ((threshW > tmp_6_fu_436_p10) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_391_p2 = ((ap_sig_allocacmp_i == 9'd256) ? 1'b1 : 1'b0);

assign lshr_ln2_fu_403_p4 = {{ap_sig_allocacmp_i[7:3]}};

assign or_ln_fu_463_p4 = {{{bin_start_V}, {8'd0}}, {trunc_ln79_reg_563}};

assign out_spikes_TDATA = or_ln_fu_463_p4;

assign ref_timer_V_1_address0 = zext_ln1031_reg_503;

assign ref_timer_V_1_d0 = 3'd5;

assign ref_timer_V_2_address0 = zext_ln1031_reg_503;

assign ref_timer_V_2_d0 = 3'd5;

assign ref_timer_V_3_address0 = zext_ln1031_reg_503;

assign ref_timer_V_3_d0 = 3'd5;

assign ref_timer_V_4_address0 = zext_ln1031_reg_503;

assign ref_timer_V_4_d0 = 3'd5;

assign ref_timer_V_5_address0 = zext_ln1031_reg_503;

assign ref_timer_V_5_d0 = 3'd5;

assign ref_timer_V_6_address0 = zext_ln1031_reg_503;

assign ref_timer_V_6_d0 = 3'd5;

assign ref_timer_V_7_address0 = zext_ln1031_reg_503;

assign ref_timer_V_7_d0 = 3'd5;

assign ref_timer_V_address0 = zext_ln1031_reg_503;

assign ref_timer_V_d0 = 3'd5;

assign tmp_6_fu_436_p9 = i_reg_493[2:0];

assign trunc_ln1031_fu_433_p1 = i_reg_493[2:0];

assign trunc_ln79_fu_430_p1 = i_reg_493[7:0];

assign v_V_1_address0 = v_V_1_addr_reg_521;

assign v_V_1_address1 = zext_ln1031_fu_413_p1;

assign v_V_1_d0 = 7'd0;

assign v_V_2_address0 = v_V_2_addr_reg_527;

assign v_V_2_address1 = zext_ln1031_fu_413_p1;

assign v_V_2_d0 = 7'd0;

assign v_V_3_address0 = v_V_3_addr_reg_533;

assign v_V_3_address1 = zext_ln1031_fu_413_p1;

assign v_V_3_d0 = 7'd0;

assign v_V_4_address0 = v_V_4_addr_reg_539;

assign v_V_4_address1 = zext_ln1031_fu_413_p1;

assign v_V_4_d0 = 7'd0;

assign v_V_5_address0 = v_V_5_addr_reg_545;

assign v_V_5_address1 = zext_ln1031_fu_413_p1;

assign v_V_5_d0 = 7'd0;

assign v_V_6_address0 = v_V_6_addr_reg_551;

assign v_V_6_address1 = zext_ln1031_fu_413_p1;

assign v_V_6_d0 = 7'd0;

assign v_V_7_address0 = v_V_7_addr_reg_557;

assign v_V_7_address1 = zext_ln1031_fu_413_p1;

assign v_V_7_d0 = 7'd0;

assign v_V_address0 = v_V_addr_reg_515;

assign v_V_address1 = zext_ln1031_fu_413_p1;

assign v_V_d0 = 7'd0;

assign zext_ln1031_fu_413_p1 = lshr_ln2_fu_403_p4;

always @ (posedge ap_clk) begin
    zext_ln1031_reg_503[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //spiking_binam_spiking_binam_Pipeline_VITIS_LOOP_79_7
